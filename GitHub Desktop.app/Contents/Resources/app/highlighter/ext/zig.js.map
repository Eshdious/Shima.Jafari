{"version":3,"file":"highlighter/ext/zig.js","mappings":"uHAEA,eAAsB,OAAO,WACzB,IAAIA,EAAW,CACXC,OAAO,EACPC,KAAK,EACLC,QAAQ,EACRC,QAAQ,EACRC,QAAQ,EACRC,KAAK,EACLC,SAAS,EACTC,QAAQ,EACRC,UAAU,EACVC,MAAM,EACNC,IAAI,EACJC,gBAAgB,EAChBC,QAAQ,EACRC,MAAM,EACNC,OAAO,EACPC,IAAI,EACJC,MAAM,EACNC,QAAQ,EACRC,OAAO,EACPC,KAAK,EACLC,OAAO,EACPC,UAAU,EACVC,QAAQ,EACRC,OAAO,EACPC,UAAU,EACVC,IAAI,EACJC,MAAM,GAGNC,EAAiB,iBAErB,SAASC,EAAUC,EAAQC,GACvB,IA4BiBC,EA5BbC,EAAKH,EAAOI,OAChB,GAAU,KAAND,EAEA,OADAF,EAAMI,UA0BOH,EA1BgBC,EA2B1B,SAAUH,EAAQC,GAIrB,IAHA,IACIG,EADAE,GAAU,EAEVC,GAAM,EACuB,OAAzBH,EAAOJ,EAAOI,SAAiB,CACnC,GAAIA,GAAQF,IAAUI,EAAS,CAC3BC,GAAM,EACN,KACJ,CACAD,GAAWA,GAAmB,MAARF,CAC1B,CAIA,OAHIG,GAAQD,IACRL,EAAMI,SAAWN,GAEd,QACX,GAzCWE,EAAMI,SAASL,EAAQC,GAElC,GAAI,OAAOrB,KAAKuB,GAEZ,OADAH,EAAOQ,SAAS,UACT,SAEX,GAAI,QAAQ5B,KAAKuB,GAAK,CAClBH,EAAOQ,SAAS,SAChB,IAAIC,EAAMT,EAAOU,UACjB,OAAIxC,EAASyC,qBAAqBF,GACvB,UAEJ,UACX,CACA,OAAIX,EAAelB,KAAKuB,IACpBH,EAAOQ,SAASV,GACT,YAED,KAANK,GAAaH,EAAOY,IAAI,MACxBZ,EAAOa,YACA,WAEJ,IACX,CAqBA,MAAO,CACHC,WAAY,WACR,MAAO,CAAET,SAAUN,EACvB,EACAgB,MAAO,SAAUf,EAAQC,GACrB,OAAID,EAAOgB,WACA,KAECf,EAAMI,SAASL,EAAQC,EAEvC,EAER,IAEA,eAAsB,aAAc,M","sources":["webpack:///./app/node_modules/codemirror-mode-zig/index.js"],"sourcesContent":["import CodeMirror from \"codemirror\";\r\n\r\nCodeMirror.defineMode(\"zig\", function () {\r\n    var keywords = {\r\n        const: true,\r\n        var: true,\r\n        extern: true,\r\n        packed: true,\r\n        export: true,\r\n        pub: true,\r\n        noalias: true,\r\n        inline: true,\r\n        comptime: true,\r\n        test: true,\r\n        fn: true,\r\n        usingnamespace: true,\r\n        struct: true,\r\n        enum: true,\r\n        union: true,\r\n        if: true,\r\n        else: true,\r\n        switch: true,\r\n        while: true,\r\n        for: true,\r\n        break: true,\r\n        continue: true,\r\n        return: true,\r\n        defer: true,\r\n        errdefer: true,\r\n        as: true,\r\n        null: true,\r\n    };\r\n\r\n    var isOperatorChar = /[+\\-*&%=<>!?|]/;\r\n\r\n    function tokenBase(stream, state) {\r\n        var ch = stream.next();\r\n        if (ch == '\"') {\r\n            state.tokenize = tokenString(ch);\r\n            return state.tokenize(stream, state);\r\n        }\r\n        if (/[\\d]/.test(ch)) {\r\n            stream.eatWhile(/[\\w\\.]/);\r\n            return \"number\";\r\n        }\r\n        if (/[\\w_]/.test(ch)) {\r\n            stream.eatWhile(/[\\w_]/);\r\n            var cur = stream.current();\r\n            if (keywords.propertyIsEnumerable(cur)) {\r\n                return \"keyword\";\r\n            }\r\n            return \"variable\";\r\n        }\r\n        if (isOperatorChar.test(ch)) {\r\n            stream.eatWhile(isOperatorChar);\r\n            return \"operator\";\r\n        }\r\n        if (ch == \"/\" && stream.eat(\"/\")) {\r\n            stream.skipToEnd();\r\n            return \"comment\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function tokenString(quote) {\r\n        return function (stream, state) {\r\n            var escaped = false,\r\n                next,\r\n                end = false;\r\n            while ((next = stream.next()) != null) {\r\n                if (next == quote && !escaped) {\r\n                    end = true;\r\n                    break;\r\n                }\r\n                escaped = !escaped && next == \"\\\\\";\r\n            }\r\n            if (end || !escaped) {\r\n                state.tokenize = tokenBase;\r\n            }\r\n            return \"string\";\r\n        };\r\n    }\r\n\r\n    return {\r\n        startState: function () {\r\n            return { tokenize: tokenBase };\r\n        },\r\n        token: function (stream, state) {\r\n            if (stream.eatSpace()) {\r\n                return null;\r\n            }\r\n            var style = state.tokenize(stream, state);\r\n            return style;\r\n        },\r\n    };\r\n});\r\n\r\nCodeMirror.defineMIME(\"text/x-zig\", \"zig\");"],"names":["keywords","const","var","extern","packed","export","pub","noalias","inline","comptime","test","fn","usingnamespace","struct","enum","union","if","else","switch","while","for","break","continue","return","defer","errdefer","as","null","isOperatorChar","tokenBase","stream","state","quote","ch","next","tokenize","escaped","end","eatWhile","cur","current","propertyIsEnumerable","eat","skipToEnd","startState","token","eatSpace"],"sourceRoot":""}